I"N<<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>

<script id="MathJax-script" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

<p>In <a href="/2021/12/22/Part1_DMKDE.html">Part 1</a> we checked at the key mathematical and statistical concepts that could allow us to talk about Kernel Density Estimation using Density Matrices. In Part 2, we would like to describe how to use the algorithm already implemented in Python by Professor <a href="https://dis.unal.edu.co/~fgonza/">Fabio Gonzalez</a> and his research group <a href="http://www.ingenieria.unal.edu.co/mindlab/">MindLab</a> at Universidad Nacional de Colombia using custom layers and models in <a href="https://www.tensorflow.org/">TensorFlow 2</a>.</p>

<h2 id="install-qmc">Install <code class="language-plaintext highlighter-rouge">qmc</code></h2>

<p>Let´s install the module <code class="language-plaintext highlighter-rouge">qmc</code> which contains</p>

<ol>
  <li><strong>Custom models</strong> inherited from the super class <code class="language-plaintext highlighter-rouge">tf.keras.Model</code>, in our case we will use:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">QMDensity()</code></li>
    </ul>
  </li>
  <li><strong>Custom layers</strong> inherited from the super class <code class="language-plaintext highlighter-rouge">tf.keras.layers.Layer</code>, we will take:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">QFeatureMapRFF()</code> layer of the quantum feature map.</li>
      <li><code class="language-plaintext highlighter-rouge">QMeasureDensity()</code> layer that actually does the measurement.</li>
    </ul>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">git</span><span class="o">+</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">fagonzalezo</span><span class="o">/</span><span class="n">qmc</span><span class="p">.</span><span class="n">git</span>
</code></pre></div></div>

<p>For more information about <code class="language-plaintext highlighter-rouge">qmc</code> you can check <a href="https://github.com/fagonzalezo/qmc">this repository</a> which contains examples in estimation, classification and regression.</p>

<p>Additionally, to recreate this experiment we will use other modules.</p>

<h2 id="importing-libraries">Importing libraries</h2>

<p>Now we can call the necessary libraries and dependencies to run this experiment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">import</span> <span class="nn">qmc.tf.layers</span> <span class="k">as</span> <span class="n">layers</span>
<span class="kn">import</span> <span class="nn">qmc.tf.models</span> <span class="k">as</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">norm</span><span class="p">,</span> <span class="n">bernoulli</span>
</code></pre></div></div>

<h3 id="kernel-density-estimation-using-density-matrices">Kernel Density Estimation using Density Matrices</h3>

<p>In order to measure how accurate the algorithm is let’s generate some random data from a two component Gaussian Mixture defined by the following density:</p>

\[f (x) = \alpha\left(\frac{1}{\sqrt{2\pi\sigma^2}}exp\left(\frac{(x-\mu_1)^2}{2\sigma_1^2}\right)\right) + \left(1-\alpha \right) \left(\frac{1}{\sqrt{2\pi\sigma^2}}exp\left(\frac{(x-\mu_2)^2}{2\sigma_2^2}\right)\right).\]

<p>For this we create the <code class="language-plaintext highlighter-rouge">Mixture()</code> class.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Mixture</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loc1</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">scale1</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">loc2</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">scale2</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">var1</span> <span class="o">=</span> <span class="n">norm</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">loc1</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">scale1</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">var2</span> <span class="o">=</span> <span class="n">norm</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">loc2</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">scale2</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span>
        
    <span class="k">def</span> <span class="nf">pdf</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">alpha</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">var1</span><span class="p">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> 
                <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">alpha</span><span class="p">)</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">var2</span><span class="p">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">rvs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">vals</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">stack</span><span class="p">([</span><span class="bp">self</span><span class="p">.</span><span class="n">var1</span><span class="p">.</span><span class="n">rvs</span><span class="p">(</span><span class="n">size</span><span class="p">),</span> <span class="bp">self</span><span class="p">.</span><span class="n">var2</span><span class="p">.</span><span class="n">rvs</span><span class="p">(</span><span class="n">size</span><span class="p">)],</span>  <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">vals</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="n">bernoulli</span><span class="p">.</span><span class="n">rvs</span><span class="p">(</span><span class="mf">1.</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">alpha</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="n">vals</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">idx</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">)])</span>
</code></pre></div></div>

<p>And instanciate it as an object <code class="language-plaintext highlighter-rouge">mixt</code>. Then we generate a random sample using the method <code class="language-plaintext highlighter-rouge">rvs</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sample</span> <span class="o">=</span> <span class="n">mixt</span><span class="p">.</span><span class="n">rvs</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<p>Notice that for this example we are working on a \(1D\) space, so each element of <code class="language-plaintext highlighter-rouge">sample</code> belong to \(\mathbb{R}\) and the way the algorithm will recieve the whole sample is in a form of an array of shape <code class="language-plaintext highlighter-rouge">(n_samples , n_dimensions)</code> where the <code class="language-plaintext highlighter-rouge">n_dimensions</code> then will be 1. So, let’s reshape our data:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="n">sample</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<p>Now we are ready to use the algorithm just by specifying:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">dim</code> : Number of Random Fourier Features.</li>
  <li><code class="language-plaintext highlighter-rouge">gamma</code>: Bandwidth related parameter.</li>
</ul>

<p>and then just using the custom models and layers in the following way.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Parameters
</span><span class="n">n_rffs</span> <span class="o">=</span> <span class="mi">300</span>
<span class="n">gamma</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c1"># Training
</span><span class="n">rffmap_x</span> <span class="o">=</span> <span class="n">layers</span><span class="p">.</span><span class="n">QFeatureMapRFF</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">dim</span> <span class="o">=</span> <span class="n">n_rffs</span><span class="p">,</span> <span class="n">gamma</span> <span class="o">=</span> <span class="n">gamma</span><span class="p">,</span> <span class="n">random_state</span> <span class="o">=</span> <span class="mi">2021</span><span class="p">)</span>
<span class="n">kde_dm</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">QMDensity</span><span class="p">(</span><span class="n">rffmap_x</span><span class="p">,</span> <span class="n">n_rffs</span><span class="p">)</span>
<span class="n">kde_dm</span><span class="p">.</span><span class="nb">compile</span><span class="p">()</span>
<span class="n">kde_dm</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># Estimation
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mf">10.</span><span class="p">,</span> <span class="mf">10.</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">densities</span> <span class="o">=</span> <span class="n">qmd</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)))</span>
</code></pre></div></div>
<p>Note: There’s <strong>no optimization step</strong> on this methodology, when we use the method <code class="language-plaintext highlighter-rouge">fit()</code> the density matrix is calculated once and with this matrix we can estimate our densities using the method <code class="language-plaintext highlighter-rouge">predict()</code>.</p>

<h2 id="plotting">Plotting</h2>

<p>We graph the results on the new data <code class="language-plaintext highlighter-rouge">x</code> where densities where calculated.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">mixt</span><span class="p">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s">'r-'</span><span class="p">,</span>  <span class="n">alpha</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'norm pdf'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">densities</span><span class="p">,</span> <span class="s">'g-'</span><span class="p">,</span>  <span class="n">alpha</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'qmkde pdf'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/Part2_DMKDE/DMKDE_40_2.png" alt="png" /></p>

<h2 id="further-reading">Further reading</h2>

<ul>
  <li>More information on customization when using <code class="language-plaintext highlighter-rouge">tf</code> this can be found at <a href="https://www.tensorflow.org/tutorials/customization/custom_layers#models_composing_layers">here</a>.</li>
</ul>
:ET